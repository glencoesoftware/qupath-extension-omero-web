plugins {
  id 'java-library'
  // To create a shadow/fat jar, including dependencies
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  // Version in settings.gradle
  id 'org.bytedeco.gradle-javacpp-platform'
}

ext.moduleName = 'qupath.extension.omero-web'
ext.qupathJavaVersion = 17
archivesBaseName = 'qupath-extension-omero-web'
description = "QuPath extension to support image reading using OMERO's web API."
version = "0.4.5-gs"

repositories {
  mavenLocal()
  mavenCentral()

  maven {
    url 'https://artifacts.glencoesoftware.com/artifactory/scijava-thirdparty'
  }

  maven {
    url 'https://artifacts.glencoesoftware.com/artifactory/ome.releases'
  }

  maven {
    url "https://maven.scijava.org/content/repositories/releases"
  }

}

dependencies {
  implementation "org.apache.commons:commons-text:1.9"
  
  shadow "io.github.qupath:qupath-gui-fx:0.5.1"    
  shadow "io.github.qupath:qupath-fxtras:0.1.4"
  shadow "ome:formats-bsd:7.0.1"
  shadow "org.slf4j:slf4j-api:1.7.30"
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Automatic-Module-Name": moduleName)
    }
}

processResources {
    from ("${projectDir}/LICENSE") {
        into 'licenses/'
    }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(qupathJavaVersion)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    def strictJavadoc = findProperty('strictJavadoc')
    if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.named('compileJava') {
    options.encoding = 'UTF-8'
}

tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

javafx {
	version = "17.0.9"
	modules = ["javafx.base",
	           "javafx.controls",
	           "javafx.graphics",
	           "javafx.media",
	           "javafx.fxml",
	           "javafx.web",
	           "javafx.swing"]
	configuration = 'api'
}
